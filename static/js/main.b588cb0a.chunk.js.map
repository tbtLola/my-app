{"version":3,"sources":["components/portpic.png","components/Heading.jsx","components/Content.jsx","components/Footer.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Heading","props","className","element","height","class","src","portpic","Content","flexGrow","bg-blue","Footer","App","flexDirection","minHeight","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,+UCe5BC,EAVC,SAAAC,GAAK,OAEnB,kBAAC,IAAD,CAASC,UAAU,UAAUC,QAAQ,SAASC,OAAO,QACnD,yBAAKC,MAAM,QACT,wBAAIH,UAAU,SAAd,YACA,yBAAKA,UAAU,aAAaI,IAAKC,SCGxBC,G,MARC,SAAAP,GAAK,OAErB,kBAAC,IAAD,CAASC,UAAU,UAAUO,SAAU,EAAGC,WAAA,GAA1C,aCGeC,G,MANA,SAAAV,GAAK,OAClB,kBAAC,IAAD,CAASC,UAAU,SAASC,QAAQ,SAASC,OAAO,QAApD,YCkBaQ,G,6LAbX,OAEE,kBAAC,IAAD,CAASV,UAAU,UAAUW,cAAc,SAASC,UAAU,SAE9D,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARYC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b588cb0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portpic.bff9cb2b.png\";","import React from \"react\";\r\nimport Flexbox from \"flexbox-react\";\r\nimport \"./Heading.css\";\r\nimport portpic from \"./portpic.png\";\r\n\r\nconst Heading = props => (\r\n  // <header className=\"top\" style={{flex: 1, flexDirection: 'row',  background:'red'} }>TEST</header>\r\n  <Flexbox className=\"Heading\" element=\"header\" height=\"60px\">\r\n    <div class=\"item\">\r\n      <h1 className=\"Title\">Tony Tea</h1>\r\n      <img className=\"profilePic\" src={portpic}></img>\r\n    </div>\r\n  </Flexbox>\r\n);\r\n\r\nexport default Heading;\r\n","import React from 'react';\r\nimport Flexbox from 'flexbox-react';\r\nimport './Content.css'\r\n\r\n\r\nconst Content = props => (\r\n\r\n<Flexbox className='content' flexGrow={1} bg-blue>\r\nContent \r\n</Flexbox> \r\n    \r\n);\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport Flexbox from \"flexbox-react\";\r\nimport './Footer.css';\r\n\r\nconst Footer = props => (\r\n  <Flexbox className=\"Footer\" element=\"footer\" height=\"60px\">\r\n    Footer\r\n  </Flexbox>\r\n);\r\n\r\nexport default Footer;\r\n","import Flexbox from 'flexbox-react';\r\nimport React from 'react';\r\nimport Heading from './Heading'\r\nimport Content from './Content'\r\nimport Footer from './Footer'\r\nimport '../App.css';\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      \r\n      <Flexbox className=\"mainApp\" flexDirection=\"column\" minHeight=\"100vh\">\r\n\r\n      <Heading></Heading>\r\n      <Content></Content>\r\n      <Footer></Footer>\r\n      </Flexbox>\r\n    \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './css/styles.css';\r\nimport App from './components/App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}